The `IHostedService` interface in .NET Core is part of the `Microsoft.Extensions.Hosting` namespace and is used to define background services that can be started and stopped within a .NET application. It is commonly implemented when you need to run long-running or recurring tasks in the background, outside the main execution flow of the application (e.g., processing messages from a queue, periodic data cleanups, etc.).

### Key Points of `IHostedService`:
1. **Methods**:
   - `StartAsync(CancellationToken cancellationToken)`: This method is called when the host is starting. It contains the logic to start the service and can be asynchronous.
   - `StopAsync(CancellationToken cancellationToken)`: This method is called when the host is shutting down. It contains logic to gracefully stop the service and clean up resources.
   
2. **Purpose**:
   - To manage the lifecycle of long-running background tasks.
   - To ensure that background tasks are properly started and stopped as part of the application's lifecycle.

3. **Usage Example**:
   ```csharp
   public class BackgroundTaskService : IHostedService
   {
       private Timer _timer;

       public Task StartAsync(CancellationToken cancellationToken)
       {
           _timer = new Timer(DoWork, null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
           return Task.CompletedTask;
       }

       private void DoWork(object state)
       {
           // Perform some background task
       }

       public Task StopAsync(CancellationToken cancellationToken)
       {
           _timer?.Change(Timeout.Infinite, 0);
           return Task.CompletedTask;
       }

       public void Dispose()
       {
           _timer?.Dispose();
       }
   }
   ```

4. **Integration**:
   - You typically register an `IHostedService` implementation in the service collection inside `Startup.cs` or `Program.cs` using `AddHostedService<T>()`.

   ```csharp
   public void ConfigureServices(IServiceCollection services)
   {
       services.AddHostedService<BackgroundTaskService>();
   }
   ```

5. **Hosted Background Services**:
   A more specialized version of `IHostedService` is `BackgroundService`, an abstract class that simplifies the implementation by providing a `ExecuteAsync(CancellationToken)` method for the actual background task logic.

This is a useful mechanism in ASP.NET Core applications where you may need to run background tasks alongside the main web server process.