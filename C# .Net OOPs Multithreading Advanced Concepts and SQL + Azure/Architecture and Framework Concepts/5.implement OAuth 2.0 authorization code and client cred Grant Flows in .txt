To implement OAuth 2.0 authentication in a **Web API**, you will typically follow these steps. Here's an outline of how you can achieve this:

### 1. **Register Your Application** on the OAuth Authorization Server
- **Authorization Server**: You need an OAuth 2.0 provider, such as Google, Microsoft Azure AD, or your custom OAuth server, that will issue tokens for your Web API.
- **Client ID and Client Secret**: Register your application to get a client ID and client secret. This will uniquely identify your Web API during the OAuth flow.

### 2. **Define the OAuth 2.0 Grant Flow**
There are different types of OAuth 2.0 flows depending on the type of application you're building. The most common ones used in Web APIs are:
- **Authorization Code Grant**: Most commonly used for server-to-server communication.
- **Client Credentials Grant**: Used for machine-to-machine authentication (service-to-service communication).

Here, we will focus on the **Authorization Code Grant** and **Client Credentials Grant** as they are common in Web API scenarios.

### Authorization Code Grant Flow (When a User Signs In)

**Step-by-Step Implementation:**

#### 2.1 Redirect the User to the Authorization Endpoint
The user needs to authorize your Web API application to access their data. You redirect the user to the authorization server's **authorization endpoint** to request an authorization code:

```plaintext
https://authorization-server.com/auth?
  response_type=code&
  client_id=CLIENT_ID&
  redirect_uri=REDIRECT_URI&
  scope=SCOPE&
  state=STATE
```
- **response_type=code**: This specifies that you are requesting an authorization code.
- **client_id**: Your application's client ID.
- **redirect_uri**: The URL to which the user will be redirected after authorization.
- **scope**: The level of access your application is requesting.
- **state**: A random value to protect against CSRF attacks.

#### 2.2 Handle the Authorization Code
Once the user successfully logs in, they will be redirected to your application with the authorization code in the URL:
```
https://your-webapp.com/callback?code=AUTH_CODE&state=STATE
```
Extract the `code` parameter from the response.

#### 2.3 Exchange the Authorization Code for an Access Token
Now, you need to exchange the authorization code for an access token by making a POST request to the **token endpoint**:

```http
POST https://authorization-server.com/token
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&
code=AUTH_CODE&
redirect_uri=REDIRECT_URI&
client_id=CLIENT_ID&
client_secret=CLIENT_SECRET
```

**Response**:
The authorization server will respond with an access token (and possibly a refresh token):
```json
{
  "access_token": "ACCESS_TOKEN",
  "token_type": "bearer",
  "expires_in": 3600,
  "refresh_token": "REFRESH_TOKEN"
}
```

#### 2.4 Use the Access Token to Call the Web API
Include the `access_token` in the `Authorization` header when making requests to your Web API:

```http
GET /api/resource HTTP/1.1
Host: api.yourservice.com
Authorization: Bearer ACCESS_TOKEN
```

### Client Credentials Grant Flow (Service-to-Service)
In this flow, there's no user interaction. It's typically used for machine-to-machine authentication, where the client application directly requests an access token using its own credentials.

#### 2.1 Request an Access Token
Make a POST request to the token endpoint with the client credentials:

```http
POST https://authorization-server.com/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials&
client_id=CLIENT_ID&
client_secret=CLIENT_SECRET&
scope=SCOPE
```

#### 2.2 Use the Access Token to Call the Web API
As in the Authorization Code Flow, the response will include an access token. You use the `access_token` in the `Authorization` header to access protected resources in the Web API.

```http
GET /api/resource HTTP/1.1
Host: api.yourservice.com
Authorization: Bearer ACCESS_TOKEN
```

### 3. **Implement Token Validation in Your Web API**
In your Web API, you need to validate the incoming access token in each request to protect the API from unauthorized access.

#### Using Middleware (in ASP.NET Core):
You can use middleware to validate the JWT access token:

1. Install the `Microsoft.AspNetCore.Authentication.JwtBearer` NuGet package:
   ```bash
   dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
   ```

2. Configure JWT authentication in `Startup.cs`:

```csharp
public void ConfigureServices(IServiceCollection services)
{
    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
        .AddJwtBearer(options =>
        {
            options.Authority = "https://authorization-server.com";
            options.Audience = "api://default";
            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true
            };
        });

    services.AddAuthorization();
    services.AddControllers();
}

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    app.UseAuthentication();
    app.UseAuthorization();

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllers();
    });
}
```

3. Secure the API controllers with `[Authorize]` attribute:

```csharp
[Authorize]
[ApiController]
[Route("api/[controller]")]
public class ResourceController : ControllerBase
{
    [HttpGet]
    public IActionResult Get()
    {
        return Ok("Secured data");
    }
}
```

This middleware automatically validates the JWT access token on incoming requests to your Web API.

### Summary of Steps:
1. Register your app with the OAuth 2.0 authorization server to get client credentials.
2. Implement the OAuth flow (either Authorization Code or Client Credentials) to get an access token.
3. Use the access token to make authenticated requests to your Web API.
4. In your Web API, validate the token using middleware (for example, JWT Bearer Authentication in ASP.NET Core).

Let me know if you need more details on any of the steps!