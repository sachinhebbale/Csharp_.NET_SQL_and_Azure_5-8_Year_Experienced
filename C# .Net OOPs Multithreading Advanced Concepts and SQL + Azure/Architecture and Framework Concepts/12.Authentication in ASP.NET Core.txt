Authentication in ASP.NET Core is a process of verifying the identity of a user or system. Here's a basic overview of how it works:

1. **Configuration**: 
   - **Add Authentication Services**: In `Startup.cs`, you configure authentication services in the `ConfigureServices` method using `services.AddAuthentication()`. You specify the authentication scheme (like Cookie, JWT, etc.).
   - **Add Authentication Middleware**: In the `Configure` method, you add the authentication middleware using `app.UseAuthentication()`.

2. **Authentication Schemes**: 
   - ASP.NET Core supports various authentication schemes like Cookies, JWT (JSON Web Tokens), OAuth, OpenID Connect, etc. You configure these schemes based on your application’s needs.

3. **Authentication Flow**:
   - **Sign-In**: When a user attempts to access a protected resource, the authentication middleware checks if the user is authenticated. If not, it challenges the user to authenticate (e.g., by redirecting them to a login page).
   - **Sign-Out**: You can sign out users by calling the sign-out method, which removes the user's authentication information and possibly redirects them to a different page.

4. **Claims and Identity**:
   - After successful authentication, the user’s identity is represented by a `ClaimsPrincipal` object, which contains user claims (like username, roles, etc.). You can access these claims throughout the application to control access and personalize the user experience.

5. **Authorization**:
   - Once authenticated, the user’s access to resources is controlled by authorization policies, which can be configured to check for specific roles, claims, or policies.

6. **Custom Authentication**:
   - You can create custom authentication handlers if the built-in options do not meet your needs. This involves implementing `IAuthenticationHandler` and registering it in the authentication services configuration.

Here’s a simplified example of configuring cookie authentication in `Startup.cs`:

```csharp
public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
                .AddCookie(options =>
                {
                    options.LoginPath = "/Account/Login";
                });

        services.AddAuthorization(options =>
        {
            options.FallbackPolicy = new AuthorizationPolicyBuilder()
                .RequireAuthenticatedUser()
                .Build();
        });

        services.AddControllersWithViews();
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }
        else
        {
            app.UseExceptionHandler("/Home/Error");
            app.UseHsts();
        }

        app.UseHttpsRedirection();
        app.UseStaticFiles();

        app.UseRouting();

        app.UseAuthentication();
        app.UseAuthorization();

        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");
        });
    }
}
```

This example sets up cookie-based authentication and requires users to be authenticated to access resources. Adjust the configuration based on your specific authentication and authorization needs.