In C#, a `record` is a reference type that is specifically designed to make working with immutable data models more convenient and expressive. Introduced in C# 9.0, records provide a concise way to define data-centric types with built-in functionality for value equality, immutability, and concise syntax.

### Key Features of `record` in C#:

1. **Immutability:**
   - By default, records are immutable. The properties of a record are usually `init`-only, meaning they can only be set during object initialization.

2. **Value Equality:**
   - Unlike classes, where equality is based on reference (i.e., whether two variables point to the same object in memory), records compare their contents to determine equality. This means that two record instances are considered equal if all their properties have the same values.

3. **Concise Syntax:**
   - Records allow for a concise syntax to define data models. You can define a record with positional parameters, which automatically creates properties, a constructor, and other relevant methods like `Equals` and `GetHashCode`.

4. **With-Expressions:**
   - Records support with-expressions, which allow you to create a copy of a record with some properties modified, without changing the original instance.

5. **Inheritance:**
   - Records support inheritance, just like classes. You can create a hierarchy of records if needed.

6. **Deconstruction:**
   - Records can be easily deconstructed into their constituent properties, making it easy to extract values.

### Example of a Record in C#:

```csharp
// A simple record with positional parameters
public record Person(string FirstName, string LastName);

class Program
{
    static void Main()
    {
        var person1 = new Person("John", "Doe");
        var person2 = new Person("John", "Doe");

        // Value equality: true
        Console.WriteLine(person1 == person2);

        // With-expression: creates a new record with a modified property
        var person3 = person1 with { LastName = "Smith" };

        // Display the properties of the new record
        Console.WriteLine(person3.FirstName); // Output: John
        Console.WriteLine(person3.LastName);  // Output: Smith
    }
}
```

### Additional Features:

1. **Inheritance with Records:**
   ```csharp
   public record Employee(string FirstName, string LastName, string Position) : Person(FirstName, LastName);
   ```

2. **Record with Explicit Properties:**
   ```csharp
   public record Car
   {
       public string Make { get; init; }
       public string Model { get; init; }

       public Car(string make, string model)
       {
           Make = make;
           Model = model;
       }
   }
   ```

3. **Deconstruction:**
   ```csharp
   var (firstName, lastName) = person1;
   Console.WriteLine(firstName); // Output: John
   Console.WriteLine(lastName);  // Output: Doe
   ```

### When to Use Records:

- **Data Models:** Use records for representing simple, immutable data models such as DTOs (Data Transfer Objects), entities in a domain-driven design, or other data-centric classes.
- **Value Equality:** Use records when you need value equality instead of reference equality, which is particularly useful in scenarios like comparisons, key lookups, or LINQ operations.
- **Immutability:** Use records when you want to enforce immutability by default, reducing the risk of unintentional side effects from modifying objects.

### Limitations:

- **Reference Type:** Although records have value equality, they are still reference types, meaning they are stored on the heap and managed by the garbage collector.
- **Performance Considerations:** Records might have a performance overhead compared to structs, especially in scenarios where large numbers of small objects are created and discarded rapidly.

Records offer a modern, streamlined way to work with data in C#, making it easier to create robust, maintainable, and efficient applications.