## **Understanding Complete REST API**

A **REST API (Representational State Transfer Application Programming Interface)** is a web service that follows REST principles to enable communication between clients and servers using HTTP.

---

## **1. Key REST Principles**
### **1.1 Statelessness**
- Each request from a client must contain all necessary information.
- The server does not store any session-related data.

### **1.2 Client-Server Architecture**
- The client (frontend, mobile, etc.) and server (backend, database, etc.) are independent.
- They communicate through RESTful endpoints.

### **1.3 Cacheability**
- Responses should define whether they can be cached to reduce network load.

### **1.4 Layered System**
- The client does not need to know if it's connected to the actual server or an intermediary (e.g., a proxy, load balancer).

### **1.5 Uniform Interface**
- A standardized way of interacting using **HTTP methods** and **resource URIs**.

### **1.6 Code on Demand (Optional)**
- The server can send executable code (like JavaScript) to the client.

---

## **2. HTTP Methods in REST API**
| **Method**  | **Description**                     | **Example**             |
|------------|---------------------------------|-----------------------|
| **GET**     | Retrieve a resource            | `GET /users/1`        |
| **POST**    | Create a new resource          | `POST /users`         |
| **PUT**     | Update an entire resource      | `PUT /users/1`        |
| **PATCH**   | Update a part of a resource    | `PATCH /users/1`      |
| **DELETE**  | Remove a resource              | `DELETE /users/1`     |

---

## **3. REST API Endpoints Example**
### **3.1 Sample API: User Management**
#### **GET Request (Retrieve Users)**
```http
GET /users
```
**Response (200 OK)**
```json
[
  { "id": 1, "name": "John Doe", "email": "john@example.com" },
  { "id": 2, "name": "Jane Smith", "email": "jane@example.com" }
]
```

#### **POST Request (Create User)**
```http
POST /users
Content-Type: application/json

{
  "name": "Alice Brown",
  "email": "alice@example.com"
}
```
**Response (201 Created)**
```json
{
  "id": 3,
  "name": "Alice Brown",
  "email": "alice@example.com"
}
```

#### **PUT Request (Update User)**
```http
PUT /users/3
Content-Type: application/json

{
  "name": "Alice Brown",
  "email": "alice.new@example.com"
}
```
**Response (200 OK)**
```json
{
  "id": 3,
  "name": "Alice Brown",
  "email": "alice.new@example.com"
}
```

#### **DELETE Request (Remove User)**
```http
DELETE /users/3
```
**Response (204 No Content)**

---

## **4. REST API Response Status Codes**
| **Code**  | **Meaning**                     | **Description**                                  |
|----------|---------------------------------|--------------------------------------------------|
| **200**  | OK                              | Successful GET request                          |
| **201**  | Created                         | Resource successfully created                   |
| **204**  | No Content                      | Successful request but no response body         |
| **400**  | Bad Request                     | Invalid input from the client                   |
| **401**  | Unauthorized                    | Authentication failed                           |
| **403**  | Forbidden                       | Access denied                                   |
| **404**  | Not Found                       | Resource does not exist                         |
| **500**  | Internal Server Error           | Unexpected server failure                       |

---

## **5. REST API Authentication**
### **5.1 Basic Authentication**
- Uses `username:password` in the request header.
```http
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
```

### **5.2 Token-Based Authentication (JWT)**
- Client sends a token in headers after login.
```http
Authorization: Bearer <your-jwt-token>
```

### **5.3 OAuth 2.0**
- Secure authentication using access tokens.
- Used by Google, Facebook, GitHub, etc.

---

## **6. REST API Versioning**
### **6.1 URL Versioning**
```http
GET /v1/users
GET /v2/users
```
### **6.2 Header Versioning**
```http
Accept: application/vnd.api.v1+json
```
### **6.3 Query Parameter Versioning**
```http
GET /users?version=1
```

---

## **7. REST API Best Practices**
âœ” Use **noun-based endpoints** (e.g., `/users` instead of `/getUsers`).  
âœ” Use **plural resource names** (`/products`, `/orders`).  
âœ” Use **proper HTTP status codes**.  
âœ” Implement **pagination** for large datasets (`?page=1&limit=20`).  
âœ” Validate input and return **clear error messages**.  
âœ” Secure API using **authentication & rate-limiting**.  

---

Would you like an example of how to build a REST API using C# .NET Core? ðŸš€