`async` and `await` in C# are keywords used to simplify asynchronous programming, making it easier to write code that performs long-running tasks, like I/O operations, without blocking the main thread. They allow you to write asynchronous code that looks and behaves like synchronous code, improving both readability and maintainability.

### **Key Concepts:**

1. **Asynchronous Methods (`async`):**
   - An asynchronous method is marked with the `async` keyword. This method can contain `await` expressions, which represent points where the method can yield control back to the calling method until the awaited task is completed.

2. **`await` Keyword:**
   - The `await` keyword is used to pause the execution of an `async` method until the awaited task completes. During this time, control is returned to the calling method, allowing the program to continue executing other code.

3. **Task-Based Asynchronous Pattern (TAP):**
   - Asynchronous methods generally return a `Task` or `Task<T>`, which represents the ongoing operation. When `await` is used on a `Task`, the method will resume once the task is completed.

### **Example of `async` and `await`:**

Let's consider a simple example that simulates fetching data asynchronously.

```csharp
using System;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        Console.WriteLine("Fetching data...");
        
        // Call the asynchronous method
        string result = await FetchDataAsync();
        
        Console.WriteLine($"Data fetched: {result}");
    }

    // Asynchronous method
    static async Task<string> FetchDataAsync()
    {
        // Simulate a delay, representing an I/O-bound operation
        await Task.Delay(3000);

        // Return the result after the delay
        return "Hello, World!";
    }
}
```

### **Explanation:**

1. **`async` Method:**
   - The `FetchDataAsync` method is marked with the `async` keyword, indicating that it is asynchronous. It returns a `Task<string>` because it eventually returns a string.

2. **`await` Expression:**
   - Inside `FetchDataAsync`, `await Task.Delay(3000)` is used to simulate a delay of 3 seconds. The `await` keyword pauses the method execution until the delay completes, without blocking the calling thread.

3. **Calling the Async Method:**
   - In the `Main` method, which is also marked `async`, `await FetchDataAsync()` is used to call the `FetchDataAsync` method. The `await` keyword here waits for the asynchronous operation to complete before proceeding to the next line.

4. **Output:**
   - The program will output "Fetching data...", then wait for 3 seconds, and finally output "Data fetched: Hello, World!".

### **Key Points to Remember:**

- **Non-blocking:**
  - When you `await` a task, the method does not block the calling thread. Instead, it returns control to the caller, allowing other work to be done while waiting for the asynchronous operation to complete.

- **Return Types:**
  - `async` methods can return `Task`, `Task<T>`, or `void`. Returning `Task` or `Task<T>` is preferred, as it allows the calling code to `await` the method. `void` is typically used for event handlers.

- **Exception Handling:**
  - Exceptions thrown in an `async` method are stored in the returned `Task` and rethrown when the task is awaited.

- **Continuation:**
  - After the `await` expression completes, the method resumes execution from where it left off, effectively "continuing" from the `await` point.

### **Summary:**

The `async` and `await` keywords in C# provide a powerful and intuitive way to write asynchronous code. They allow you to perform potentially time-consuming operations, such as I/O-bound tasks, without blocking the main thread, leading to more responsive applications. By marking methods as `async` and using `await` to asynchronously wait for tasks to complete, you can handle asynchronous operations in a clear and concise manner.